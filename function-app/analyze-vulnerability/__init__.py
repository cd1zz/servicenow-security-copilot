"""
Azure Function: Analyze Vulnerability
HTTP triggered function to analyze a single CVE or QID
Enhanced with comprehensive logging for debugging
"""

import azure.functions as func
import json
import logging
import os
import time
from typing import Dict, Any

from services import ServiceNowClient, VulnerabilityAnalyzer
from services.logging_utils import FunctionLogger

# Configure logger for this function
function_logger = FunctionLogger(__name__)


def main(req: func.HttpRequest) -> func.HttpResponse:
    """
    HTTP trigger function to analyze a vulnerability.
    
    Expected JSON body:
    {
        "vuln_id": "CVE-2024-1234" or "QID-123456",
        "fetch_all_details": false,  # optional, default false
        "include_patched": false,     # optional, default false
        "confirmation_state": "confirmed"  # optional
    }
    """
    # Start request logging
    function_logger.start_request(req, {
        'function_name': 'analyze-vulnerability',
        'function_version': '2.0'
    })
    
    try:
        # Validate API key
        api_key = req.headers.get('X-API-Key')
        expected_key = os.environ.get('API_KEY')
        
        if expected_key and api_key != expected_key:
            function_logger.log_warning("Invalid API key provided", {
                'provided_key_length': len(api_key) if api_key else 0,
                'expected_key_configured': bool(expected_key),
                'headers_present': list(req.headers.keys())
            })
            
            response = func.HttpResponse(
                json.dumps({"error": "Invalid API key"}),
                status_code=401,
                mimetype="application/json"
            )
            function_logger.end_request(response, {'auth_failure': True})
            return response
        
        function_logger.log_debug("API key validation passed")
        
        # Parse request body
        try:
            req_body = req.get_json()
            function_logger.log_debug("Request body parsed successfully", {
                'body_keys': list(req_body.keys()) if req_body else [],
                'body_size': len(str(req_body)) if req_body else 0
            })
        except ValueError as e:
            function_logger.log_error(e, {'parsing_stage': 'request_body'})
            response = func.HttpResponse(
                json.dumps({"error": "Invalid JSON in request body"}),
                status_code=400,
                mimetype="application/json"
            )
            function_logger.end_request(response, {'json_parse_error': True})
            return response
        
        # Validate required parameters
        vuln_id = req_body.get('vuln_id')
        if not vuln_id:
            function_logger.log_warning("Missing required parameter: vuln_id", {
                'provided_params': list(req_body.keys()) if req_body else []
            })
            response = func.HttpResponse(
                json.dumps({"error": "Missing required parameter: vuln_id"}),
                status_code=400,
                mimetype="application/json"
            )
            function_logger.end_request(response, {'validation_error': 'missing_vuln_id'})
            return response
        
        # Get optional parameters
        fetch_all_details = req_body.get('fetch_all_details', False)
        include_patched = req_body.get('include_patched', False)
        confirmation_state = req_body.get('confirmation_state')
        
        function_logger.log_business_event('PARAMETER_VALIDATION_COMPLETE', {
            'vuln_id': vuln_id,
            'fetch_all_details': fetch_all_details,
            'include_patched': include_patched,
            'confirmation_state': confirmation_state,
            'vuln_id_type': 'QID' if vuln_id.upper().startswith('QID-') or vuln_id.isdigit() else 'CVE'
        })
        
        # Initialize ServiceNow client
        function_logger.log_debug("Initializing ServiceNow client")
        client_start_time = time.time()
        
        try:
            client = create_servicenow_client()
            client_init_duration = time.time() - client_start_time
            
            function_logger.log_business_event('SERVICENOW_CLIENT_INITIALIZED', {
                'initialization_duration_ms': round(client_init_duration * 1000, 2),
                'instance_url': client.instance_url
            })
            
        except Exception as e:
            function_logger.log_error(e, {
                'initialization_stage': 'servicenow_client',
                'duration_ms': round((time.time() - client_start_time) * 1000, 2)
            })
            response = func.HttpResponse(
                json.dumps({"error": f"ServiceNow client initialization failed: {str(e)}"}),
                status_code=500,
                mimetype="application/json"
            )
            function_logger.end_request(response, {'client_init_error': True})
            return response
        
        # Initialize analyzer
        analyzer = VulnerabilityAnalyzer(client)
        
        # Analyze vulnerability
        function_logger.log_business_event('VULNERABILITY_ANALYSIS_START', {
            'vuln_id': vuln_id,
            'analysis_parameters': {
                'fetch_all_details': fetch_all_details,
                'include_patched': include_patched,
                'confirmation_state': confirmation_state
            }
        })
        
        analysis_start_time = time.time()
        
        try:
            results = analyzer.analyze_vulnerability(
                vuln_id=vuln_id,
                fetch_all_details=fetch_all_details,
                include_patched=include_patched,
                confirmation_state=confirmation_state
            )
            
            analysis_duration = time.time() - analysis_start_time
            
            function_logger.log_business_event('VULNERABILITY_ANALYSIS_COMPLETE', {
                'vuln_id': vuln_id,
                'analysis_duration_ms': round(analysis_duration * 1000, 2),
                'found': results.get('found', False),
                'total_vulnerable_systems': results.get('total_vulnerable_systems', 0),
                'systems_retrieved': len(results.get('systems', [])),
                'vuln_type': results.get('vuln_type', 'unknown')
            })
            
        except Exception as e:
            analysis_duration = time.time() - analysis_start_time
            function_logger.log_error(e, {
                'analysis_stage': 'vulnerability_analysis',
                'vuln_id': vuln_id,
                'duration_ms': round(analysis_duration * 1000, 2)
            })
            response = func.HttpResponse(
                json.dumps({"error": f"Vulnerability analysis failed: {str(e)}"}),
                status_code=500,
                mimetype="application/json"
            )
            function_logger.end_request(response, {'analysis_error': True})
            return response
        
        # Format response
        function_logger.log_debug("Formatting response")
        format_start_time = time.time()
        
        try:
            response_data = format_response(results)
            format_duration = time.time() - format_start_time
            
            function_logger.log_business_event('RESPONSE_FORMATTING_COMPLETE', {
                'format_duration_ms': round(format_duration * 1000, 2),
                'response_size': len(json.dumps(response_data)),
                'response_status': response_data.get('status', 'unknown')
            })
            
        except Exception as e:
            format_duration = time.time() - format_start_time
            function_logger.log_error(e, {
                'formatting_stage': 'response_formatting',
                'duration_ms': round(format_duration * 1000, 2)
            })
            response = func.HttpResponse(
                json.dumps({"error": f"Response formatting failed: {str(e)}"}),
                status_code=500,
                mimetype="application/json"
            )
            function_logger.end_request(response, {'formatting_error': True})
            return response
        
        # Create successful response
        response = func.HttpResponse(
            json.dumps(response_data, default=str),
            status_code=200,
            mimetype="application/json"
        )
        
        function_logger.end_request(response, {
            'vulnerability_found': results.get('found', False),
            'systems_count': len(results.get('systems', [])),
            'total_vulnerable_systems': results.get('total_vulnerable_systems', 0)
        })
        
        return response
        
    except Exception as e:
        function_logger.log_error(e, {
            'error_stage': 'unexpected_error',
            'error_type': type(e).__name__
        })
        
        response = func.HttpResponse(
            json.dumps({"error": f"Unexpected error: {str(e)}"}),
            status_code=500,
            mimetype="application/json"
        )
        
        function_logger.end_request(response, {'unexpected_error': True})
        return response


def create_servicenow_client() -> ServiceNowClient:
    """Create ServiceNow client with credentials from environment/Key Vault."""
    function_logger.log_debug("Creating ServiceNow client from environment variables")
    
    # Get credentials from environment
    instance_url = os.environ.get('SERVICENOW_INSTANCE_URL')
    client_id = os.environ.get('SERVICENOW_CLIENT_ID')
    client_secret = os.environ.get('SERVICENOW_CLIENT_SECRET')
    username = os.environ.get('SERVICENOW_USERNAME')
    password = os.environ.get('SERVICENOW_PASSWORD')
    
    # Validate credentials
    missing_creds = []
    if not instance_url:
        missing_creds.append('SERVICENOW_INSTANCE_URL')
    if not client_id:
        missing_creds.append('SERVICENOW_CLIENT_ID')
    if not client_secret:
        missing_creds.append('SERVICENOW_CLIENT_SECRET')
    if not username:
        missing_creds.append('SERVICENOW_USERNAME')
    if not password:
        missing_creds.append('SERVICENOW_PASSWORD')
    
    if missing_creds:
        function_logger.log_error(ValueError("Missing ServiceNow credentials"), {
            'missing_credentials': missing_creds,
            'total_missing': len(missing_creds)
        })
        raise ValueError(f"Missing ServiceNow credentials: {', '.join(missing_creds)}")
    
    function_logger.log_debug("All ServiceNow credentials found in environment", {
        'instance_url': instance_url,
        'username': username,
        'client_id_length': len(client_id),
        'client_secret_length': len(client_secret),
        'password_length': len(password)
    })
    
    return ServiceNowClient(
        instance_url=instance_url,
        client_id=client_id,
        client_secret=client_secret,
        username=username,
        password=password
    )


def format_response(results: Dict[str, Any]) -> Dict[str, Any]:
    """Format the analysis results for API response."""
    function_logger.log_debug("Formatting response", {
        'results_keys': list(results.keys()),
        'found': results.get('found', False)
    })
    
    if not results.get('found'):
        response = {
            "status": "not_found",
            "vuln_id": results.get('vuln_id'),
            "message": f"Vulnerability {results.get('vuln_id')} not found in ServiceNow"
        }
        
        function_logger.log_business_event('VULNERABILITY_NOT_FOUND', {
            'vuln_id': results.get('vuln_id'),
            'vuln_type': results.get('vuln_type', 'unknown')
        })
        
        return response
    
    response = {
        "status": "success",
        "vuln_id": results.get('vuln_id'),
        "vuln_type": results.get('vuln_type'),
        "summary": results.get('summary'),
        "cvss_score": results.get('cvss_score'),
        "published": results.get('published'),
        "source": results.get('source'),
        "statistics": {
            "total_vulnerable_systems": results.get('total_vulnerable_systems', 0),
            "total_all_time": results.get('total_all_time', 0),
            "systems_retrieved": results.get('systems_retrieved', 0),
            "sample_only": results.get('sample_only', False)
        }
    }
    
    # Add filtered count if applicable
    if 'filtered_vulnerable_systems' in results:
        response['statistics']['filtered_vulnerable_systems'] = results['filtered_vulnerable_systems']
        response['statistics']['confirmation_filter'] = results.get('confirmation_filter')
    
    # Add associated CVEs for QIDs
    if results.get('associated_cves'):
        response['associated_cves'] = results['associated_cves']
        function_logger.log_debug("Added associated CVEs", {
            'associated_cves_count': len(results['associated_cves'].split(',')) if results['associated_cves'] else 0
        })
    
    # Add system details (limited for API response)
    systems = results.get('systems', [])
    if systems:
        limited_systems = []
        for system in systems[:100]:  # Limit to 100 systems
            limited_systems.append({
                "name": system['name'],
                "vi_number": system.get('vi_number', 'N/A'),
                "ip_address": system['ip_address'],
                "type": system['type'],
                "status": system['status'],
                "assignment_group": system.get('assignment_group', 'N/A'),
                "description": system.get('description', '')
            })
        
        response['systems'] = limited_systems
        
        function_logger.log_business_event('SYSTEMS_FORMATTED', {
            'total_systems_available': len(systems),
            'systems_included_in_response': len(limited_systems),
            'truncated': len(systems) > 100
        })
    
    function_logger.log_debug("Response formatting completed", {
        'response_status': response['status'],
        'systems_count': len(response.get('systems', [])),
        'total_vulnerable_systems': response['statistics']['total_vulnerable_systems']
    })
    
    return response