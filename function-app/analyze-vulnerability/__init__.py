"""
Azure Function: Analyze Vulnerability
HTTP triggered function to analyze a single CVE or QID
"""

import azure.functions as func
import json
import logging
import os
from typing import Dict, Any

from services import ServiceNowClient, VulnerabilityAnalyzer

logger = logging.getLogger(__name__)


def main(req: func.HttpRequest) -> func.HttpResponse:
    """
    HTTP trigger function to analyze a vulnerability.
    
    Expected JSON body:
    {
        "vuln_id": "CVE-2024-1234" or "QID-123456",
        "fetch_all_details": false,  # optional, default false
        "include_patched": false,     # optional, default false
        "confirmation_state": "confirmed"  # optional
    }
    """
    logger.info('Analyze Vulnerability function triggered')
    
    try:
        # Validate API key
        api_key = req.headers.get('X-API-Key')
        expected_key = os.environ.get('API_KEY')
        
        if expected_key and api_key != expected_key:
            return func.HttpResponse(
                json.dumps({"error": "Invalid API key"}),
                status_code=401,
                mimetype="application/json"
            )
        
        # Parse request body
        try:
            req_body = req.get_json()
        except ValueError:
            return func.HttpResponse(
                json.dumps({"error": "Invalid JSON in request body"}),
                status_code=400,
                mimetype="application/json"
            )
        
        # Validate required parameters
        vuln_id = req_body.get('vuln_id')
        if not vuln_id:
            return func.HttpResponse(
                json.dumps({"error": "Missing required parameter: vuln_id"}),
                status_code=400,
                mimetype="application/json"
            )
        
        # Get optional parameters
        fetch_all_details = req_body.get('fetch_all_details', False)
        include_patched = req_body.get('include_patched', False)
        confirmation_state = req_body.get('confirmation_state')
        
        # Initialize ServiceNow client
        client = create_servicenow_client()
        analyzer = VulnerabilityAnalyzer(client)
        
        # Analyze vulnerability
        results = analyzer.analyze_vulnerability(
            vuln_id=vuln_id,
            fetch_all_details=fetch_all_details,
            include_patched=include_patched,
            confirmation_state=confirmation_state
        )
        
        # Format response
        response = format_response(results)
        
        return func.HttpResponse(
            json.dumps(response, default=str),
            status_code=200,
            mimetype="application/json"
        )
        
    except Exception as e:
        logger.error(f"Error processing request: {str(e)}")
        return func.HttpResponse(
            json.dumps({"error": str(e)}),
            status_code=500,
            mimetype="application/json"
        )


def create_servicenow_client() -> ServiceNowClient:
    """Create ServiceNow client with credentials from environment/Key Vault."""
    # Try to get from Key Vault first (if configured)
    instance_url = os.environ.get('SERVICENOW_INSTANCE_URL')
    client_id = os.environ.get('SERVICENOW_CLIENT_ID')
    client_secret = os.environ.get('SERVICENOW_CLIENT_SECRET')
    username = os.environ.get('SERVICENOW_USERNAME')
    password = os.environ.get('SERVICENOW_PASSWORD')
    
    if not all([instance_url, client_id, client_secret, username, password]):
        raise ValueError("Missing ServiceNow credentials in environment variables")
    
    return ServiceNowClient(
        instance_url=instance_url,
        client_id=client_id,
        client_secret=client_secret,
        username=username,
        password=password
    )


def format_response(results: Dict[str, Any]) -> Dict[str, Any]:
    """Format the analysis results for API response."""
    if not results.get('found'):
        return {
            "status": "not_found",
            "vuln_id": results.get('vuln_id'),
            "message": f"Vulnerability {results.get('vuln_id')} not found in ServiceNow"
        }
    
    response = {
        "status": "success",
        "vuln_id": results.get('vuln_id'),
        "vuln_type": results.get('vuln_type'),
        "summary": results.get('summary'),
        "cvss_score": results.get('cvss_score'),
        "published": results.get('published'),
        "source": results.get('source'),
        "statistics": {
            "total_vulnerable_systems": results.get('total_vulnerable_systems', 0),
            "total_all_time": results.get('total_all_time', 0),
            "systems_retrieved": results.get('systems_retrieved', 0),
            "sample_only": results.get('sample_only', False)
        }
    }
    
    # Add filtered count if applicable
    if 'filtered_vulnerable_systems' in results:
        response['statistics']['filtered_vulnerable_systems'] = results['filtered_vulnerable_systems']
        response['statistics']['confirmation_filter'] = results.get('confirmation_filter')
    
    # Add associated CVEs for QIDs
    if results.get('associated_cves'):
        response['associated_cves'] = results['associated_cves']
    
    # Add system details (limited for API response)
    if results.get('systems'):
        response['systems'] = [
            {
                "name": system['name'],
                "vi_number": system.get('vi_number', 'N/A'),
                "ip_address": system['ip_address'],
                "type": system['type'],
                "status": system['status'],
                "assignment_group": system.get('assignment_group', 'N/A'),
                "description": system.get('description', '')
            }
            for system in results['systems'][:100]  # Limit to 100 systems
        ]
    
    return response