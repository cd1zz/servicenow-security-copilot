name: Secret Scanning

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run weekly on Mondays at 9am UTC
    - cron: '0 9 * * 1'

permissions:
  contents: read
  security-events: write  # Required for CodeQL to upload results
  actions: read  # Required for CodeQL

jobs:
  trufflehog:
    name: TruffleHog Secret Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for scanning

      - name: TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event_name == 'pull_request' && github.event.pull_request.base.sha || '' }}
          head: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.sha || 'HEAD' }}
          extra_args: --only-verified

  gitleaks:
    name: Gitleaks Secret Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  github-secret-scanning:
    name: GitHub Advanced Security
    runs-on: ubuntu-latest
    continue-on-error: true  # Don't fail the workflow if CodeQL isn't available
    if: github.event_name != 'schedule'  # Skip on scheduled runs
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: python
          
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  detect-secrets:
    name: Detect Secrets
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install detect-secrets
        run: |
          pip install detect-secrets

      - name: Check for new secrets
        run: |
          # Generate fresh scan and save to file
          detect-secrets scan > .secrets.baseline.new
          
          # Create Python script for comparison
          cat << 'EOF' > check_secrets.py
          import sys, json
          
          # Read new scan from stdin
          new_scan = json.load(sys.stdin)
          
          # Try to load baseline if it exists
          try:
              with open('.secrets.baseline', 'r') as f:
                  baseline = json.load(f)
              baseline_results = baseline.get('results', {})
          except FileNotFoundError:
              print("No baseline found, checking for any secrets...")
              sys.exit(1 if new_scan.get('results', {}) else 0)
          
          new_results = new_scan.get('results', {})
          
          # Check for new secrets not in baseline
          has_new_secrets = False
          for file, secrets in new_results.items():
              if file not in baseline_results:
                  has_new_secrets = True
                  print(f'⚠️ New secrets in file: {file}')
              else:
                  for secret in secrets:
                      if secret not in baseline_results[file]:
                          has_new_secrets = True
                          print(f'⚠️ New secret in {file} at line {secret.get("line_number", "unknown")}')
          
          if not has_new_secrets:
              print('✅ No new secrets detected')
          sys.exit(1 if has_new_secrets else 0)
          EOF
          
          # Run the check
          detect-secrets scan | python check_secrets.py